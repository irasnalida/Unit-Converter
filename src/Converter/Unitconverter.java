package Converter;
import javax.swing.JOptionPane;
import mass_core.*;
import temp_core.*;
import length_core.*;
import volume_core.*;
import java.math.BigDecimal;

public class Unitconverter extends javax.swing.JFrame {
    double entered_value,result_value;
    String from_unit,into_unit;
    short massFlag=0,lengFlag=0,voluFlag=0,tempFlag=0;
    short massFlag1=0,lengFlag1=0,voluFlag1=0,tempFlag1=0;

    public Unitconverter() {
        initComponents();
        intoUNIT.removeAllItems();
        fromUNIT.removeAllItems();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    /**
     * Creates the interface for the Converter.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsPanel = new javax.swing.JPanel();
        mass = new javax.swing.JButton();
        distance = new javax.swing.JButton();
        Volume = new javax.swing.JButton();
        Temp = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        conversionPanel = new javax.swing.JPanel();
        into = new javax.swing.JLabel();
        value = new javax.swing.JLabel();
        valueFIELD = new javax.swing.JTextField();
        intoUNIT = new javax.swing.JComboBox<>();
        fromUNIT = new javax.swing.JComboBox<>();
        convert = new javax.swing.JButton();
        ansFIELD = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Unit Converter");
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(750, 460));
        setResizable(false);

        buttonsPanel.setBackground(new java.awt.Color(153, 153, 153));

        mass.setBackground(new java.awt.Color(239, 239, 239));
        mass.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        mass.setText("MASS");
        mass.setBorder(null);
        mass.setBorderPainted(false);
        mass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massActionPerformed(evt);
            }
        });

        distance.setBackground(new java.awt.Color(239, 239, 239));
        distance.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        distance.setText("DISTANCE");
        distance.setBorder(null);
        distance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceActionPerformed(evt);
            }
        });

        Volume.setBackground(new java.awt.Color(239, 239, 239));
        Volume.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Volume.setText("VOLUME");
        Volume.setBorder(null);
        Volume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolumeActionPerformed(evt);
            }
        });

        Temp.setBackground(new java.awt.Color(239, 239, 239));
        Temp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Temp.setText("TEMPERATURE");
        Temp.setBorder(null);
        Temp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TempActionPerformed(evt);
            }
        });

        statusLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setText("SELECTED : NOTHING");

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(mass, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(Temp, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(Volume, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(distance, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                .addGap(76, 76, 76))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(mass, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(distance, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Volume, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Temp, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        conversionPanel.setBackground(new java.awt.Color(0, 255, 204));
        conversionPanel.setForeground(new java.awt.Color(204, 204, 204));
        conversionPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                conversionPanelMouseEntered(evt);
            }
        });

        into.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        into.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        into.setText("INTO");

        value.setText("Enter Value");

        valueFIELD.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        valueFIELD.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        intoUNIT.setBackground(new java.awt.Color(204, 204, 204));
        intoUNIT.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        intoUNIT.setMaximumRowCount(10);
        intoUNIT.setBorder(null);
        intoUNIT.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        intoUNIT.setMaximumSize(new java.awt.Dimension(26, 18));

        fromUNIT.setBackground(new java.awt.Color(204, 204, 204));
        fromUNIT.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        fromUNIT.setBorder(null);
        fromUNIT.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        fromUNIT.setMaximumSize(new java.awt.Dimension(26, 18));

        convert.setBackground(new java.awt.Color(239, 239, 239));
        convert.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        convert.setText("CONVERT");
        convert.setBorder(null);
        convert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                convertMouseEntered(evt);
            }
        });
        convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertActionPerformed(evt);
            }
        });

        ansFIELD.setBackground(new java.awt.Color(153, 255, 255));
        ansFIELD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ansFIELD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout conversionPanelLayout = new javax.swing.GroupLayout(conversionPanel);
        conversionPanel.setLayout(conversionPanelLayout);
        conversionPanelLayout.setHorizontalGroup(
            conversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conversionPanelLayout.createSequentialGroup()
                .addGroup(conversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(conversionPanelLayout.createSequentialGroup()
                        .addGroup(conversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(conversionPanelLayout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(fromUNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(into, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(intoUNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(conversionPanelLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(value, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(valueFIELD, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(conversionPanelLayout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(convert, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 58, Short.MAX_VALUE))
                    .addComponent(ansFIELD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        conversionPanelLayout.setVerticalGroup(
            conversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conversionPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(conversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromUNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(into, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intoUNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(conversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueFIELD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value))
                .addGap(30, 30, 30)
                .addComponent(convert, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(ansFIELD, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(178, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conversionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(conversionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buttonsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Function declaration - do not modify.            
     /**
     *Contains Function Performed when "MASS" Button is pressed.
     */
    private void massActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_massActionPerformed
        massFlag=1;lengFlag=0;voluFlag=0;tempFlag=0;
        massFlag1=1;lengFlag1=0;voluFlag1=0;tempFlag1=0;
        statusLabel.setText("SELECTED : MASS");
        String[] items = new String[] {"--SELECT--","Ton","Kilogram","Gram","Ounce","Pound","Milligram"};
        fromUNIT.removeAllItems();intoUNIT.removeAllItems();
        intoUNIT.addItem(items[0]);fromUNIT.addItem(items[0]);
        intoUNIT.addItem(items[1]);fromUNIT.addItem(items[1]);
        intoUNIT.addItem(items[2]);fromUNIT.addItem(items[2]);
        intoUNIT.addItem(items[3]);fromUNIT.addItem(items[3]);
        intoUNIT.addItem(items[4]);fromUNIT.addItem(items[4]);
        intoUNIT.addItem(items[5]);fromUNIT.addItem(items[5]);
        intoUNIT.addItem(items[6]);fromUNIT.addItem(items[6]);
        mass.setBackground(new java.awt.Color(160,164,255));
        distance.setBackground(new java.awt.Color(240,240,240));
        Temp.setBackground(new java.awt.Color(240,240,240));
        Volume.setBackground(new java.awt.Color(240,240,240));
        ansFIELD.setText("");valueFIELD.setText("");
    }//GEN-LAST:event_massActionPerformed

     /**
     *Contains Function performed when "VOLUME" Button is pressed.
     */
    private void VolumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolumeActionPerformed
        massFlag=0;lengFlag=0;voluFlag=1;tempFlag=0;
        massFlag1=0;lengFlag1=0;voluFlag1=1;tempFlag1=0;
        statusLabel.setText("SELECTED : VOLUME");
        String[] items = new String[] {"--SELECT--","Litre","Cubic cm","Millilitre","Cubic Metre"};
        intoUNIT.removeAllItems();fromUNIT.removeAllItems();
        intoUNIT.addItem(items[0]);fromUNIT.addItem(items[0]);
        intoUNIT.addItem(items[1]);fromUNIT.addItem(items[1]);
        intoUNIT.addItem(items[2]);fromUNIT.addItem(items[2]);
        intoUNIT.addItem(items[3]);fromUNIT.addItem(items[3]);
        intoUNIT.addItem(items[4]);fromUNIT.addItem(items[4]);
        mass.setBackground(new java.awt.Color(239,239,239));
        distance.setBackground(new java.awt.Color(239,239,239));
        Temp.setBackground(new java.awt.Color(239,239,239));
        Volume.setBackground(new java.awt.Color(160,164,255));
        ansFIELD.setText("");valueFIELD.setText("");
    }//GEN-LAST:event_VolumeActionPerformed

     /**
     *Contains Function Performed when "DISTANCE" Button is pressed.
     */
    private void distanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceActionPerformed
        massFlag=0;lengFlag=1;voluFlag=0;tempFlag=0;
        massFlag1=0;lengFlag1=1;voluFlag1=0;tempFlag1=0;
        statusLabel.setText("SELECTED : DISTANCE");
        String[] items = new String[] {"--SELECT--","Kilometre","Millimetre","Centimetre","Metre","Inch","Feet"};
        intoUNIT.removeAllItems();fromUNIT.removeAllItems();
        intoUNIT.addItem(items[0]);fromUNIT.addItem(items[0]);
        intoUNIT.addItem(items[1]);fromUNIT.addItem(items[1]);
        intoUNIT.addItem(items[2]);fromUNIT.addItem(items[2]);
        intoUNIT.addItem(items[3]);fromUNIT.addItem(items[3]);
        intoUNIT.addItem(items[4]);fromUNIT.addItem(items[4]);
        intoUNIT.addItem(items[5]);fromUNIT.addItem(items[5]);
        intoUNIT.addItem(items[6]);fromUNIT.addItem(items[6]);
        mass.setBackground(new java.awt.Color(239,239,239));
        distance.setBackground(new java.awt.Color(160,164,255));
        Temp.setBackground(new java.awt.Color(239,239,239));
        Volume.setBackground(new java.awt.Color(239,239,239));
        ansFIELD.setText("");valueFIELD.setText("");
    }//GEN-LAST:event_distanceActionPerformed

     /**
     *Contains Function Performed when "CONVERT" Button is pressed.
     */
    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed
        from_unit= fromUNIT.getSelectedItem() +"";
        into_unit= intoUNIT.getSelectedItem() +"";
        ansFIELD.setText("");
        if(from_unit.equalsIgnoreCase("--SELECT--") || into_unit.equalsIgnoreCase("--SELECT--")){
            massFlag=0;voluFlag=0;lengFlag=0;tempFlag=0;
            JOptionPane.showMessageDialog(null, "Please select somthing.");
        }else{
            massFlag=massFlag1;voluFlag=voluFlag1;lengFlag=lengFlag1;tempFlag=tempFlag1;
        }
        try{
        entered_value = Double.parseDouble(valueFIELD.getText());
        }
        catch(Exception e){
            massFlag=0;voluFlag=0;lengFlag=0;tempFlag=0;
            JOptionPane.showMessageDialog(null, "Please Enter valid number.");
        }
        //MASS____________________________________________
        if(massFlag ==1){
            Kilogram kilogram =new Kilogram();
            Gram gram =new Gram();
            Ton ton =new Ton();
            Milligram milligram =new Milligram();
            Ounce ounce =new Ounce();
            Pound pound =new Pound();
            if(from_unit.equalsIgnoreCase(into_unit)){
                ansFIELD.setText(Double.toString(entered_value)+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("kilogram")){
                result_value=kilogram.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("gram")){
                result_value=gram.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("ton")){
                result_value=ton.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("milligram")){
                result_value=milligram.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("ounce")){
                result_value=ounce.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("pound")){
                result_value=pound.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else{
                JOptionPane.showMessageDialog(null, "Something went wrong.");
            }
        }//VOLUME____________________________
        if(voluFlag==1){
            Litre obj_liter =new Litre();
            Millilitre obj_milliliter =new Millilitre();
            Cubic_cm obj_cubic_cm=new Cubic_cm();
            Cubic_m obj_cubic_m=new Cubic_m();
            if(from_unit.equalsIgnoreCase(into_unit)){
                ansFIELD.setText(Double.toString(entered_value)+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("Millilitre")){
                result_value=obj_milliliter.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("litre")){
                result_value=obj_liter.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("Cubic cm")){
                result_value=obj_cubic_cm.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("Cubic Metre")){
                result_value=obj_cubic_m.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else{
                JOptionPane.showMessageDialog(null, "Something went wrong.");
            }
        }//DISTANCE__________________________
        if(lengFlag==1){
            Kilometre obj_kilometer =new Kilometre();
            Metre obj_meter =new Metre();
            Feet obj_foot =new Feet();
            Millimetre obj_millimeter =new Millimetre();
            Inch obj_inch =new Inch();
            Centimetre obj_centimeter =new Centimetre();
            if(from_unit.equalsIgnoreCase(into_unit)){
                ansFIELD.setText(Double.toString(entered_value)+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("kilometre")){
                result_value=obj_kilometer.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("metre")){
                result_value=obj_meter.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("inch")){
                result_value=obj_inch.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("millimetre")){
                result_value=obj_millimeter.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("feet")){
                result_value=obj_foot.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("centimetre")){
                result_value=obj_centimeter.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else{
                JOptionPane.showMessageDialog(null, "Something went wrong.");
            }
        }//TEMPERATURE______________________
        if(tempFlag==1){
            Celsius obj_celsius =new Celsius();
            Kelvin obj_kelvin =new Kelvin();
            Fahrenheit obj_fah=new Fahrenheit();     
            if(from_unit.equalsIgnoreCase(into_unit)){
                ansFIELD.setText(Double.toString(entered_value)+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("kelvin")){
                result_value=obj_kelvin.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("celsius")){
                result_value=obj_celsius.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else if(from_unit.equalsIgnoreCase("fahrenheit")){
                result_value=obj_fah.unit_Checker(entered_value,into_unit);
                ansFIELD.setText(BigDecimal.valueOf(result_value).toPlainString()+" "+ into_unit);
            }
            else{
                JOptionPane.showMessageDialog(null, "Something went wrong.");
            }
        }
    }//GEN-LAST:event_convertActionPerformed

     /**
     *Contains Function Performed when "TEMPERATURE" Button is pressed.
     */
    private void TempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TempActionPerformed
        massFlag=0;lengFlag=0;voluFlag=0;tempFlag=1;
        massFlag1=0;lengFlag1=0;voluFlag1=0;tempFlag1=1;
        statusLabel.setText("SELECTED : TEMPERATURE");
        String[] items = new String[] {"--SELECT--","Kelvin","Celsius","Fahrenheit"};
        intoUNIT.removeAllItems();
        fromUNIT.removeAllItems();
        intoUNIT.addItem(items[0]);fromUNIT.addItem(items[0]);
        intoUNIT.addItem(items[1]);fromUNIT.addItem(items[1]);
        intoUNIT.addItem(items[2]);fromUNIT.addItem(items[2]);
        intoUNIT.addItem(items[3]);fromUNIT.addItem(items[3]);  
        mass.setBackground(new java.awt.Color(239,239,239));
        distance.setBackground(new java.awt.Color(239,239,239));
        Temp.setBackground(new java.awt.Color(160,164,255));
        Volume.setBackground(new java.awt.Color(239,239,239));
        ansFIELD.setText("");valueFIELD.setText("");
    }//GEN-LAST:event_TempActionPerformed

    private void convertMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convertMouseEntered
        convert.setBackground(new java.awt.Color(160,164,255));
    }//GEN-LAST:event_convertMouseEntered

    private void conversionPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_conversionPanelMouseEntered
        convert.setBackground(new java.awt.Color(239,239,239));
    }//GEN-LAST:event_conversionPanelMouseEntered

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Unitconverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Unitconverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Unitconverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Unitconverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Unitconverter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Temp;
    private javax.swing.JButton Volume;
    private javax.swing.JLabel ansFIELD;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel conversionPanel;
    private javax.swing.JButton convert;
    private javax.swing.JButton distance;
    private javax.swing.JComboBox<String> fromUNIT;
    private javax.swing.JLabel into;
    private javax.swing.JComboBox<String> intoUNIT;
    private javax.swing.JButton mass;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel value;
    private javax.swing.JTextField valueFIELD;
    // End of variables declaration//GEN-END:variables
}